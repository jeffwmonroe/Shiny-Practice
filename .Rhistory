179/12
90/12
126/12
D <- c(0:100)
D
R <- c(0:100)
D <- 166-R
D
Plot (D)
plot (D)
aline
abline ( 166, 1)
abline ( 166, -1)
abline ( h=100 )
abline ( v=150 )
# D = 166-R
# R = 166 - D
D <- c(0:166)
R <- 166-R
plot (R)
D
R <- 166-D
plot (R)
abline ( 166, -1)
abline ( h=100 )
abline ( v=150 )
abline ( h=100, col = "Blue" )
abline ( v=150, col = "Green" )
abline ( v=150, col = "Dark Green" )
plot( NA)
plot( NA, xlim = c(0,170), ylim=c(0,170))
abline ( 166, -1)
abline ( h=100, col = "Blue" )
abline ( v=150, col = "Dark Green" )
choose(3,2)
choose(50,2)
choose(4,2)
log(350)
log(350)/25
log(1)
log(250)/25
log(250)
log(250)/25
4588/2000
60*3.1*30
###########################################################################
#            This tries to calculate WIP Limit analytically
#
wip.sta <- data.frame( N = c(18, 20, 12), C=c(1,0.5,1), L=rep(0,3), WIP=rep(0,3), W=rep(0,3),ES=c(0.2,0.225,0.05), MU=rep(0,3), lambda=rep(0,3), rho=rep(0,3))
wip.sta$ES<-wip.sta$ES*12   # ES * kits per lot
wip.sta$ES[2]
wip.sta$ES[3]<-wip.sta$ES[3]+1  # add in the hour pep time
wip.sta$MU <- 1/ wip.sta$ES
goal_rho <- 0.978
#This is the lambda required to get each station to the above rho
wip.sta$lambda  <-goal_rho * wip.sta$N * wip.sta$MU  # units 1/hr
lambda <- max ( wip.sta$lambda )
goal_station <- which(wip.sta$lambda==lambda)
###################
#  calculatate L for each station
for ( i in 1:3 ){
wip.sta$rho[i] <- lambda/(wip.sta$N[i]*wip.sta$MU[i])
wip.sta$L[i] <- (wip.sta$rho[i] ^ ( 2*(wip.sta$N[i]+1)) * wip.sta$C[i]) / (1-wip.sta$rho[i])
}
wip.sta$WIP= (wip.sta$rho*wip.sta$N + wip.sta$L)/5 # divide by the number of lots
wip <- sum(wip.sta$WIP)
sprintf( "WIP:        %f", wip)
#View(wip.sta)
wip.sta$W= wip.sta$L / min(wip.sta$lambda)
W<-sum(wip.sta$W)
ES<- sum(wip.sta$ES)
sprintf("Time:        %f - [%f, %f]",ES+W, ES,W)
print( wip.sta$rho)
###########################################################################
set.seed(1359)
orders.day <- 40  # orders / day
orders.hours <- orders.day / 24  # orders / hr
#test.runs <- data.frame ( Duration = c( 7.274144, 7.940700, 9.694727, 11.739969, 12.223433, 16.187099), WIP = c(9, 10, 12, 15, 16, 21), Success = c(0.78,0.87, 93.5, 0.96))
# 6.724838, 7, 0.65
# 7.021115, 8, 0.80
# 7.760228, 9,0.88
# 20.571894,
# hours is the number of hours to run the sim for
hours <- 24*100
# this is the number of samples to run. the algorythm runs the number of samples
# and then trims to the number of hours above
sample.size <- hours*100
# this is the average processing time for work (ES)
duration <- 24*0.65 #12 #18 #24*0.9
#WIP.limit <- 16
#24*0.75
# This is the start of the simulation. It makes a vector of sample.size long
# with a lambda of orders.hours. Using an exponential
Orders= rexp(sample.size, orders.hours)
duration.list = rexp ( sample.size, 1/(duration-3.7) ) + 3.7
# This takes the vector of orders and turns them into a Poisson process but
# adding them together. This will give the interarrival rates of the orders
for ( i in 2:sample.size ){
Orders[i] <- Orders[i]+Orders[i-1]
}
# This trims the orders to the desired number of orders. It is kind of hacky but
# what we do is over sample and then trim to the desired number of hours. This is
# because it is difficult to know how many orders to process due to the variabilty
# of the exponential draw
Arrivals <- head ( Orders, which( Orders > hours )[1]-1 )
# the sim data frame
# each row is an order
# Arrivals - is the time that an order arrives
# Departures - is when the order finishes processing. THis is important because we queue the orders up and
#           take them off the queue when they are done processing
# Accepted - this is a boolean. It is set to true if the the order is accpeted and is worked on and set to
#             false if the order is rejected due to the WIP limit
order.mod <- data.frame( Arrivals, Departures = rep (0, length(Arrivals)), Accepted = rep ( NA, length(Arrivals))  )
# this sets the departure time. It is deterministic right now. A good enhancement would be to make it stoicastic
duration.list <- head( duration.list, length(order.mod$Arrivals))
order.mod$Departures <- order.mod$Arrivals + duration.list
# work.queue is a vector to track orders in process. Orders are pushed into the queue when they arrive and
# are popped off when they are done processing - ie when the time is greater than the Departures time
ratio_accepted <- c()
for(WIP.limit in 20:25){
work.queue <- c()
# We loop over the orders as the sim
for ( i in 1:length(order.mod$Arrivals)){
#sim.time is the arrival time of the order being processed. The time of the simulation is governed
# by the time of the order getting processed. This jumps time forward at that rate.
sim.time <- order.mod$Arrivals[i]
# The first thing we need to do is see if any orders are on the queue with a Departure time that is
# less than sim.time. If this is the case we pull them off of the queue using the tail statment.
# This takes advantage of the fact that the work.queue is time ordered
procesed.work <- which( work.queue < sim.time )
work.queue <- tail ( work.queue, length(work.queue) - length(procesed.work))
#if the lenght of the work.quueue is less than the WIP limit then we accept the order and
# push it into the work.queue. We flag it as accepted. If the work.queue is equal to or longer
# than the WIP.limit then we mark the order as not accepeted
if ( length(work.queue) < WIP.limit ){
order.mod$Accepted[i]=TRUE
work.queue <- c( work.queue, order.mod$Departures[i] )
} else {
order.mod$Accepted[i]<- FALSE
}
}
accepted <- length ( which ( order.mod$Accepted == TRUE ))
ratio_accepted <- c(ratio_accepted,accepted / length(order.mod$Arrivals))
}
ratio_accepted
###### lowest WIP that gives 100%:
#average orders/day #best WIP
#25: 15
#26: 15
#27: 15
#28: 16
#29: 16
#30: 16
#31: 16
#32: 17
###########################################################################
R.version.string
install.packages(installr)
install.packages("installr")
library(installr)
updateR()
R.version.string
install.packages("tidyverse")
install.packages('IRkernel')
library('IRkernel')
IRkernel::installspec()
library(IRdisplay)
w <- data.frame( phone = c("Galaxy S99", "Galaxy S100", "iPhone 99", "iPhone 100"),
TypeA = c(0.1,0.1,2.1,2.5),
TypeB = c(2,2.2,0.01,0.01),
TypeC = c( 2,2.2,2.1,2.5),
Revenue = c(440,548,550,660))
typec <- c( w$TypeC, 1 )
sales <- data.frame( typeA = rep(0,4))
sales
sales <- data.frame( typeA = rep(0,4),
typeB = rep(0,4),
typeC = rep(0,4))
typec
typec / sum(typec)
sales$typeC <- 100 * w$TypeC / sum(w$TypeC)
sales
sales <- data.frame( typeA = rep(0,5),
typeB = rep(0,5),
typeC = rep(0,5))
sales$typeC <- 100 * typec / sum(typec)
sales
sales <- data.frame( typeA = rep(0,5),
typeB = rep(0,5),
typeC = rep(0,5))
typec <- c( w$TypeC, 1 )
sales$typeC <- 100 * typec / sum(typec)
typeb <- c( w$TypeB, 1 )
sales$typeB <- 100 * typeb / sum(typeb)
typea <- c( w$TypeA, 1 )
sales$typeA <- 100 * typebc / sum(typeb)
sales
typea <- c( w$TypeA, 1 )
sales$typeA <- 100 * typea / sum(typea)
sales
sales$total <- sum ( sales$typeA + sales$typeB + salses$typeC)
sales$total <- sum ( sales$typeA + sales$typeB + sales$typeC)
sales
sales$total <- sales$typeA + sales$typeB + sales$typeC
sales
sales <- data.frame( typeA = rep(0,5),
typeB = rep(0,5),
typeC = rep(0,5))
typec <- c( w$TypeC, 1 )
sales$typeC <- 133 * typec / sum(typec)
typeb <- c( w$TypeB, 1 )
sales$typeB <- 133 * typeb / sum(typeb)
typea <- c( w$TypeA, 1 )
sales$typeA <- 133 * typea / sum(typea)
sales
sales$total <- sales$typeA + sales$typeB + sales$typeC
sales
sales <- data.frame( typeC = rep(0,5),
typeB = rep(0,5),
typeA = rep(0,5))
typec <- c( w$TypeC, 1 )
sales$typeC <- 100 * typec / sum(typec)
typeb <- c( w$TypeB, 1 )
sales$typeB <- 100 * typeb / sum(typeb)
typea <- c( w$TypeA, 1 )
sales$typeA <- 100 * typea / sum(typea)
sales
sales$total <- sales$typeA + sales$typeB + sales$typeC
sales
sales <- data.frame( phone = c(w$phone, "No Sale"),
typeC = rep(0,5),
typeB = rep(0,5),
typeA = rep(0,5))
sales <- data.frame( phone = c(w$phone, "No Sale"),
typeC = rep(0,5),
typeB = rep(0,5),
typeA = rep(0,5))
typec <- c( w$TypeC, 1 )
sales$typeC <- 100 * typec / sum(typec)
typeb <- c( w$TypeB, 1 )
sales$typeB <- 100 * typeb / sum(typeb)
typea <- c( w$TypeA, 1 )
sales$typeA <- 100 * typea / sum(typea)
sales$total <- sales$typeA + sales$typeB + sales$typeC
sales
sum(sales$typeA)
sum(sales$typeB)
sum(sales$typeC)
shiny::runApp('D:/Dropbox (Personal)/Genaesis/PAI/Financial Model/hello shiny')
installed.packages()
update.packages( check=FALSE )
variables <- rep(NA,3)
names(variables)
names(variables) <- c("startDate", "endDate", "months")
names (variables)
variables$startDate
variables[startDate]
install.packages(c("backports", "broom", "cli", "clipr", "colorspace", "commonmark", "cpp11", "crayon", "DBI", "digest", "dplyr", "dtplyr", "evaluate", "fansi", "fs", "generics", "glue", "gt", "httpuv", "jsonlite", "knitr", "magrittr", "mgcv", "nlme", "openssl", "openxlsx", "pillar", "processx", "Rcpp", "readr", "rlang", "rmarkdown", "rsconnect", "sass", "stringi", "survival", "tibble", "tidyr", "tidyselect", "tinytex", "uuid", "vroom", "withr", "xfun", "xml2", "yaml"))
library(rstudioapi)
setwd(dirname(getActiveDocumentContext()$path))
library(shiny)
ui <- fluidPage()
server <- function ( input, output ) {}
shinyApp( ui=ui, server = server)
runApp('test file.R')
ui <- fluidPage(
sliderInput( inputId = "num",
label= "Choose a number",
value=25,
min=1,
max=100)
)
server <- function ( input, output ) {}
shinyApp( ui=ui, server = server)
runApp('test file.R')
runApp('test file.R')
runApp('test file.R')
runApp('test file.R')
runApp('test file.R')
runApp('test file.R')
runApp('test file.R')
runApp('test file.R')
runApp()
runApp()
